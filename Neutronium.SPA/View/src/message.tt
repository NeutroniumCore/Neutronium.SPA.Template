<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".json" #>
<# 
	Langages = new [] { "en-US"};
	Resources = new []{ "Resource" };
#>
{
 <# var first = true;
 PushIndent("    ");
 foreach (var langage in Langages) {
	if (!first){
		WriteLine("},");
	}
	first =false;
	WriteLine($@"""{langage}"":{{");
	PushIndent("    ");
	foreach(var resource in Resources){
		WriteLine($@"""{resource}"":{{");
		PushIndent("    ");
		var dic = GetDictionary(resource, langage);
		DisplayDictionary(dic);
		PopIndent();
		WriteLine("}");
	}
	PopIndent();
 } 
 WriteLine("}");
 PopIndent();
 #>
}
<#+
private string[] Langages;
private string[] Resources;

private void DisplayDictionary(IEnumerable<KeyValuePair<string,string>> dictionary){
	var first = true;
	foreach(var entry in dictionary){
		if (!first){
			WriteLine(",");
		}
		first = false;
		Write($@"""{entry.Key}"":""{entry.Value}""");
	}
	WriteLine("");
}

private string GetPath(string resourceName, string langage){
	var directory =  Path.Combine(this.Host.ResolvePath(""), "..\\..\\");
	var path = Path.Combine(directory, $"{resourceName}.{langage}.resx");
	return File.Exists(path) ? path : Path.Combine(directory, $"{resourceName}.resx");
}

private IEnumerable<KeyValuePair<string,string>> GetDictionary(string resourceName, string langage){
	var path = GetPath(resourceName, langage);
	var data = XElement.Load(path);
	return data.Descendants("data").Select(el =>
	{
		var value = el.Descendants("value").First().Value;
		return new KeyValuePair<string, string>(el.Attribute("name").Value, value);
	});
}
#>